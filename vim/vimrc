set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'benmills/vimux'
Plugin 'eakmeister/vim-gitmodeline'
Plugin 'google/yapf', { 'rtp': 'plugins/vim' }
Plugin 'lervag/vim-latex'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'vim-airline/vim-airline'
Plugin 'junegunn/fzf', {'dir' : '~/config/fzf', 'do': './install --all'}
Plugin 'junegunn/fzf.vim'
Plugin 'kana/vim-fakeclip'
Plugin 'majutsushi/tagbar'
Plugin 'morhetz/gruvbox'
Plugin 'scrooloose/nerdcommenter'
"Plugin 'scrooloose/syntastic'
Plugin 'sfiera/vim-emacsmodeline'
Plugin 'Shougo/deoplete.nvim', { 'do' : ':UpdateRemotePlugins' }
Plugin 'Shougo/vimproc.vim'
Plugin 'tell-k/vim-autopep8'
Plugin 'tpope/vim-obsession'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/a.vim'
Plugin 'w0rp/ale'
Plugin 'wting/rust.vim'
Plugin 'zchee/deoplete-clang'
Plugin 'llvm-syntax', {'pinned' : 1}
Plugin 'armasm', {'pinned' : 1}

call vundle#end()
filetype plugin on

set ruler
set number
set nohlsearch
set backspace=2
set guioptions-=T " turn the menu bar off
set scrolloff=3
set modeline

set splitbelow
set splitright

" ============================= Swap files ===================================

set noswapfile
set nobackup
set nowb

" ============================== wildmenu ====================================

set wildmenu
set wildmode=list:longest,full
set wildignore=*.o,*~,*.pyc,*.pyo,*.so,*.sw*,__pycache__

" ============================= Indentation ==================================
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent
set expandtab
set smarttab

filetype indent on

" Don't set smart indent for python files
set smartindent
au! FileType python setl nosmartindent

" ============================= Colorscheme ==================================

syntax enable
set background=dark
colorscheme gruvbox

" ============================= Powerline ====================================

set laststatus=2
set encoding=utf-8
let g:Powerline_symbols = 'fancy'
set t_Co=256

" ============================= Cscope =======================================

set nocscopeverbose

" ============================ Key bindings ==================================

let mapleader = "\<Space>"
imap jk <Esc>
imap kj <Esc>
vnoremap < <gv
vnoremap > >gv
nnoremap Y y$
nnoremap <leader>v :vs<CR>
nnoremap <leader>s :split<CR>
nnoremap <leader>a :A<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>o :Files<CR>
nnoremap <leader>u :Buffers<CR>
vmap <leader>y "+y
vmap <leader>d "+d
cmap w!! %!sudo tee > /dev/null %

augroup FiletypeBindings
    autocmd BufEnter,BufRead * call s:FiletypeSpecificBindings(&filetype)
augroup END

function s:FiletypeSpecificBindings(filetype)
    if a:filetype == "python"
        nnoremap <leader>b :call PythonTogglePDB()<CR>
        nnoremap <leader>f :call yapf#YAPF()<CR>
        vnoremap <leader>f :'<,'>call yapf#YAPF()<CR>
    elseif a:filetype == "c" || a:filetype == "cpp"
        " ================== clang-format ====================================
        map <leader>f :py3f ~/config/vim/clang-format.py<CR>
    endif
endfunction

function PythonTogglePDB()
    let breakpoint = "import pdb; pdb.set_trace()"
    let line = substitute(getline('.'), '^\s*\(.\{-}\)\s*$', '\1', '')

    if line == breakpoint
        :normal dd
    else
        :normal Oimport pdb; pdb.set_trace()
    endif
endfunction

" ============================ Syntastic =====================================
" don't print style warnings
"let g:syntastic_python_pylint_quiet_messages = {"level" : "warning"}

" ============================= Tag Bar ======================================

let g:tagbar_usearrows = 1
nnoremap <leader>l :TagbarToggle<CR>

" ========================== YouCompleteMe ===================================

let g:ycm_filetype_whitelist = {
\       'cpp' : 1,
\       'python' : 1,
\       'c' : 1
\   }

let g:ycm_confirm_extra_conf = 0
let g:ycm_autoclose_preview_window_after_insertion = 1

nnoremap <leader>c :YcmForceCompileAndDiagnostics<CR>

" ================================ deoplete ==================================

let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#clang#libclang_path = "/usr/local/lib/libclang.so"
let g:deoplete#sources#clang#clang_header = "/usr/local/lib/clang"

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ neocomplete#start_manual_complete()
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" ================================= LaTeX ====================================

" REQUIRED. This makes vim invoke Latex-Suite when you open a tex file.
filetype plugin on

" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
set shellslash

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: This enables automatic indentation as you type.
"filetype indent on

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

" ============================== LLVM Syntax =================================

augroup filetype
    au! BufRead,BufNewFile *.ll     set filetype=llvm
augroup END

augroup filetype
    au! BufRead,BufNewFile *.td     set filetype=tablegen
augroup END

" =============================== a.vim ======================================
let g:alternateExtensions_cc = "inc,h,H,HPP,hpp,hh"
let g:alternateExtensions_hh = "cc,cpp,cxx,c"
au VimEnter * iunmap <leader>ih
au VimEnter * iunmap <leader>is
au VimEnter * iunmap <leader>ihn

" ============================== sessions ====================================

function s:SessionOnEnter()
    let l:pid = getpid()

    if system('uname -s') == "Darwin\n"
        let l:ppid = system('ps aux -o ppid | grep ' . l:pid . ' | grep vim | rev | cut -d" " -f1 | rev')
    else
        let l:ppid = system('cut -f4 -d" " /proc/' . l:pid . '/stat')[0:-2]
    endif

    let g:vim_session_file = '.vim_session.' . l:ppid

    if argc() == 0 && filereadable(g:vim_session_file)
        exec ':source ' g:vim_session_file
    endif

    exec ':Obsession ' g:vim_session_file
    let g:detach_session = 0
endfunction

function s:SessionOnExit()
    if g:detach_session == 0
        call delete(g:vim_session_file)
    endif
endfunction

function DetachSession()
    let g:detach_session = 1
    :qa
endfunction

autocmd VimEnter * nested call s:SessionOnEnter()
autocmd VimLeave * call s:SessionOnExit()
nnoremap <leader>q :call DetachSession()<CR>
