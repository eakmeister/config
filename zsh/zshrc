# Detect the current platform
platform='unknown'
unamestr=$(uname)
if [[ "$unamestr" == 'Linux' ]]; then
	platform='linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
	platform='darwin'
fi

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh
ZSH_LOCAL=$HOME/.zshrc-local

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="eastwood"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git zsh-iterm-touchbar)

source $ZSH/oh-my-zsh.sh
unsetopt correct_all
unsetopt auto_cd

function cfiles {
    find -regextype posix-egrep -regex '.*\.h$|.*\.hpp$|.*\.c$|.*\.cpp|.*\.cc$'
}

function cgrep {
    2>/dev/null grep -n "$@" $(cfiles) | nl | grep "$@"
}

function update-env {
    if [[ -n $TMUX ]]; then
        export DISPLAY=$(tmux showenv | grep ^DISPLAY | cut -d = -f 2)
    fi
}

function build-current-dir {
    echo '\e]50;ClearScrollback\a'

    if [ -e CMakeLists.txt ] && [ -d build ]; then
        cd build
        build-current-dir $@
        cd ..
    elif [ -e Makefile ]; then
        make $@
    elif [ -e build.ninja ]; then
        ninja $@
    elif [ -e SConstruct ]; then
        scons $@
    else
        echo "Build system not found" >&2
    fi
}

function tmux-attach {
    if [[ $# == 0 ]]; then
        tmux list-sessions
        return
    fi

    if [[ "$(echo $SSH_CLIENT | cut -d ' ' -f 1 | nslookup | grep 'name = ' | sed 's/.*name = \(.*\)\./\1/')" == "mm237133-pc.mitre.org" ]]; then
        tmux -CC attach -d -t $@
    else
        tmux attach -d -t $@
    fi
}

function tmux-new {
    if [[ $# == 0 ]]; then
        echo 'Please provide a session name'
        return
    fi

    if [[ "$(echo $SSH_CLIENT | cut -d ' ' -f 1 | nslookup | grep 'name = ' | sed 's/.*name = \(.*\)\./\1/')" == "mm237133-pc.mitre.org" ]]; then
        tmux -CC new-session -s $@
    else
        tmux new-session -s $@
    fi
}

export EDITOR=nvim

export PATH=/usr/lib/ccache:~/bin:$PATH
export LD_LIBRARY_PATH=~/lib:$LD_LIBRARY_PATH

# Set up aliases
alias l='ls'
alias ll='ls -lh'
alias la='ls -a'
alias cs='cscope -R'
alias vi='nvim'
alias ssh-r='ssh -R 3128:localhost:3128'
alias hd='hexdump -C'
alias b=build-current-dir
alias ta=tmux-attach
alias tn=tmux-new

if [[ "$platform" == 'darwin' ]]; then
	alias ls='ls -G'
elif [[ "$platform" == 'linux' ]]; then
	alias ls='ls --color=auto'
fi

export CCACHE_CPP2=yes

# Make git tab completion faster, at the expense of being a bit less smart
__git_files () { 
        _wanted files expl 'local files' _files     
}

if [[ -e "$ZSH_LOCAL" ]]; then
    source "$ZSH_LOCAL"
fi

if [[ -n $TMUX ]]; then
    precmd() {tmux rename-window "$(hostname) - $(tmux display-message -p '#S')"}
else
    precmd() {echo -ne "\e]0; $(hostname) \007"}
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
